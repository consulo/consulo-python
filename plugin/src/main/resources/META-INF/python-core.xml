<consulo-plugin>
	<!-- Components and extensions declared in this file work both in PyCharm and Python plugin. -->


	<extensions defaultExtensionNs="com.intellij">


		<lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.documentation.PythonDocumentationProvider"/>
		<lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.console.PydevDocumentationProvider"/>
		<annotator language="Python" implementationClass="com.jetbrains.python.validation.PyAnnotatingVisitor"/>
		<annotator language="Python" implementationClass="com.jetbrains.python.validation.PyDumbAwareAnnotator"/>


		<projectService serviceInterface="com.jetbrains.python.psi.PyElementGenerator"
						serviceImplementation="com.jetbrains.python.psi.impl.PyElementGeneratorImpl"/>

		<applicationService serviceInterface="com.jetbrains.python.packaging.PyPackageService"
							serviceImplementation="com.jetbrains.python.packaging.PyPackageService"/>

		<typedHandler implementation="com.jetbrains.python.codeInsight.KeywordTypedHandler" id="pyCommaAfterKwd"/>
		<typedHandler implementation="com.jetbrains.python.codeInsight.PyMethodNameTypedHandler" id="pyMethodNameTypedHandler"/>
		<typedHandler implementation="com.jetbrains.python.editor.PythonSpaceHandler"/>

		<fileBasedIndex implementation="com.jetbrains.python.psi.stubs.PySetuptoolsNamespaceIndex"/>

		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndex"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndexInsensitive"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyFunctionNameIndex"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PySuperClassIndex"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyVariableNameIndex"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyInstanceAttributeIndex"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyDecoratorStubIndex"/>
		<stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassAttributesIndex"/>


		<moduleService serviceInterface="com.jetbrains.python.ReSTService"
					   serviceImplementation="com.jetbrains.python.ReSTService"/>

		<!-- Run/Debug -->
		<applicationService serviceInterface="com.jetbrains.python.run.PyRunConfigurationFactory"
							serviceImplementation="com.jetbrains.python.run.PyRunConfigurationFactoryImpl"/>
		<applicationService serviceInterface="com.jetbrains.python.run.PythonRunConfigurationExtensionsManager"
							serviceImplementation="com.jetbrains.python.run.PythonRunConfigurationExtensionsManager"/>
		<programRunner implementation="com.jetbrains.python.run.PythonRunner" order="first"/>
		<runConfigurationProducer implementation="com.jetbrains.python.run.PythonRunConfigurationProducer"/>
		<xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyLineBreakpointType"/>
		<xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyExceptionBreakpointType"/>

		<configurationType implementation="com.jetbrains.python.testing.PythonTestConfigurationType"/>

		<runConfigurationProducer implementation="com.jetbrains.python.testing.unittest.PythonUnitTestConfigurationProducer"/>
		<testSrcLocator implementation="com.jetbrains.python.testing.PythonUnitTestTestIdUrlProvider"/>

		<runConfigurationProducer implementation="com.jetbrains.python.testing.pytest.PyTestConfigurationProducer"/>
		<runConfigurationProducer implementation="com.jetbrains.python.testing.doctest.PythonDocTestConfigurationProducer"/>
		<runConfigurationProducer implementation="com.jetbrains.python.testing.nosetest.PythonNoseTestConfigurationProducer"/>
		<runConfigurationProducer implementation="com.jetbrains.python.testing.attest.PythonAtTestConfigurationProducer"/>




		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyConvertMethodToPropertyIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.ImportToImportFromIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyConvertStaticMethodToFunctionIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.SpecifyTypeInDocstringIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.SpecifyTypeInPy3AnnotationsIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.TypeAssertionIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.ImportFromToImportIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.ImportToggleAliasIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PySplitIfIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyNegateComparisonIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyStringConcatenationToFormatIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.ConvertFormatOperatorToMethodIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyFlipComparisonIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyDemorganIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.ReplaceListComprehensionWithForIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyJoinIfIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyDictConstructorToLiteralFormIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyDictLiteralFormToConstructorIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyQuotedStringIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyConvertLambdaToFunctionIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.ConvertVariadicParamIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyConvertTripleQuotedStringIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyTransformConditionalExpressionIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyGenerateDocstringIntention</className>
			<category>Python</category>
		</intentionAction>

		<intentionAction>
			<className>com.jetbrains.python.codeInsight.intentions.PyYieldFromIntention</className>
			<category>Python</category>
		</intentionAction>


		<stubElementTypeHolder class="com.jetbrains.python.PyElementTypes"/>





		<statementUpDownMover implementation="com.jetbrains.python.codeInsight.editorActions.moveUpDown.PyStatementMover" id="statement"
							  order="before line"/>


		<elementDescriptionProvider implementation="com.jetbrains.python.findUsages.PyElementDescriptionProvider"/>


		<lang.parserDefinition language="PythonRegExp"
							   implementationClass="com.jetbrains.python.codeInsight.regexp.PythonRegexpParserDefinition"/>
		<lang.parserDefinition language="PythonVerboseRegExp"
							   implementationClass="com.jetbrains.python.codeInsight.regexp.PythonVerboseRegexpParserDefinition"/>
		<lang.syntaxHighlighterFactory key="PythonVerboseRegExp"
									   implementationClass="com.jetbrains.python.codeInsight.regexp.PythonVerboseRegexpSyntaxHighlighterFactory"/>

		<applicationService serviceInterface="com.jetbrains.python.codeInsight.PyCodeInsightSettings"
							serviceImplementation="com.jetbrains.python.codeInsight.PyCodeInsightSettings"/>
		<applicationService serviceImplementation="com.jetbrains.python.testing.PyTestFrameworkService" />
		<applicationConfigurable id="editor.preferences.import.python"
								 parentId="editor.preferences.import"
								 displayName="Python"
								 instance="com.jetbrains.python.codeInsight.imports.PyAutoImportConfigurable"/>

		<bundleLiveTemplateSet path="/liveTemplates/Python"/>


		<weigher key="completion" implementationClass="com.jetbrains.python.codeInsight.completion.PythonCompletionWeigher" order="first"/>
		<typedHandler implementation="com.jetbrains.python.console.completion.PythonConsoleAutopopupBlockingHandler" id="pydevBlockAutoPopup"
					  order="first, before completionAutoPopup"/>



		<refactoring.changeSignatureUsageProcessor implementation="com.jetbrains.python.refactoring.changeSignature.PyChangeSignatureUsageProcessor"
												   id="Python"/>





		<internalFileTemplate name="Python Script"/>
		<internalFileTemplate name="Python Unit Test"/>
		<internalFileTemplate name="Setup Script"/>

		<moduleService serviceInterface="com.jetbrains.python.psi.resolve.PythonPathCache"
					   serviceImplementation="com.jetbrains.python.psi.resolve.PythonModulePathCache"/>

		<problemFileHighlightFilter implementation="com.jetbrains.python.codeInsight.PyProblemFileHighlightFilter"/>

		<applicationConfigurable id="editor.preferences.smartKeys.python"
								 parentId="editor.preferences.smartKeys"
								 displayName="Python"
								 instance="com.jetbrains.python.codeInsight.PySpecificSmartKeysOptions"/>


		<applicationService serviceInterface="com.jetbrains.python.documentation.PythonDocumentationMap"
							serviceImplementation="com.jetbrains.python.documentation.PythonDocumentationMap"/>
		<applicationConfigurable instance="com.jetbrains.python.documentation.PythonDocumentationConfigurable"
								 parentId="execution"
								 id="py.external.doc"
								 displayName="Python External Documentation"/>
		<applicationService serviceInterface="com.jetbrains.python.console.PythonConsoleRunnerFactory"
							serviceImplementation="com.jetbrains.python.console.PydevConsoleRunnerFactory"/>
		<projectService serviceImplementation="com.jetbrains.python.console.PythonConsoleToolWindow" />
		<projectConfigurable instance="com.jetbrains.python.configuration.PyIntegratedToolsModulesConfigurable"
							 parentId="execution"
							 id="com.jetbrains.python.configuration.PyIntegratedToolsModulesConfigurable" displayName="Python Integrated Tools"
							 nonDefaultProject="true"/>
		<moduleService serviceInterface="com.jetbrains.python.documentation.PyDocumentationSettings"
					   serviceImplementation="com.jetbrains.python.documentation.PyDocumentationSettings"/>

		<projectConfigurable instance="com.jetbrains.python.console.PyConsoleOptionsConfigurable"/>
		<projectService serviceImplementation="com.jetbrains.python.console.PyConsoleOptions"/>

		<projectConfigurable id="py.debugger" parentId="execution" displayName="Python Debugger" instance="com.jetbrains.python.debugger.PyDebuggerConfigurable"/>

		<projectService serviceImplementation="com.jetbrains.python.debugger.PyDebuggerOptionsProvider"/>



		<projectService serviceInterface="com.jetbrains.python.debugger.PySignatureCacheManager"
						serviceImplementation="com.jetbrains.python.debugger.PySignatureCacheManagerImpl"/>

		<projectService serviceInterface="com.jetbrains.python.psi.PyPsiFacade"
						serviceImplementation="com.jetbrains.python.psi.impl.PyPsiFacadeImpl"/>
		<applicationService serviceInterface="com.jetbrains.python.packaging.PyPackageManagers"
							serviceImplementation="com.jetbrains.python.packaging.PyPackageManagersImpl"/>



		<additionalTextAttributes scheme="Default" file="colorSchemes/PythonDefault.xml"/>
		<additionalTextAttributes scheme="Darcula" file="colorSchemes/PythonDarcula.xml"/>



		<moduleService serviceInterface="com.jetbrains.python.testing.TestRunnerService"
					   serviceImplementation="com.jetbrains.python.testing.TestRunnerService"/>

		<problemFileHighlightFilter implementation="com.jetbrains.python.buildout.config.BuildoutCfgProblemFileHighlightFilter"/>



		<!-- Packaging -->
		<moduleService serviceInterface="com.jetbrains.python.packaging.PyPackageRequirementsSettings"
					   serviceImplementation="com.jetbrains.python.packaging.PyPackageRequirementsSettings"/>

		<listOfElements name="pythonExtensions">
			<add>python</add>
		</listOfElements>

		<projectService serviceInterface="com.jetbrains.python.psi.types.TypeEvalContextCache"
						serviceImplementation="com.jetbrains.python.psi.types.TypeEvalContextCacheImpl"
				/>
		<applicationService serviceInterface="com.jetbrains.python.PythonFoldingSettings"
							serviceImplementation="com.jetbrains.python.PythonFoldingSettings"/>

		<xdebugger.settings implementation="com.jetbrains.python.debugger.settings.PyDebuggerSettings"/>

		<editorActionHandler action="EditorCopy" implementationClass="com.jetbrains.python.console.PyConsoleCopyHandler"/>
	</extensions>

	<extensions defaultExtensionNs="consulo.python">
		<pySuperMethodsSearch implementation="com.jetbrains.python.psi.search.DefaultPySuperMethodsSearchExecutor"/>
		<pyClassInheritorsSearch implementation="com.jetbrains.python.psi.search.DefaultPyClassInheritorsSearchExecutor"/>
		<pyOverridingMethodsSearch implementation="com.jetbrains.python.psi.search.DefaultPyOverridingMethodsSearchExecutor"/>
		<dumbAnnotator implementation="com.jetbrains.python.validation.DocStringAnnotator"/>
		<dumbAnnotator implementation="com.jetbrains.python.validation.PyDefinitionsAnnotator"/>
		<dumbAnnotator implementation="com.jetbrains.python.validation.GeneratorInArgumentListAnnotator"/>

		<typeProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibTypeProvider"/>
		<pyModuleMembersProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibModuleMembersProvider"/>

		<!-- User skeletons -->
		<pyModuleMembersProvider implementation="com.jetbrains.python.codeInsight.userSkeletons.PyUserSkeletonsModuleMembersProvider"/>



	</extensions>

	<actions>
		<group id="PyTypeHierarchyPopupMenu">
			<reference ref="TypeHierarchyBase.BaseOnThisType"/>
			<reference ref="TypeHierarchy.Class"/>
			<reference ref="TypeHierarchy.Subtypes"/>
			<reference ref="TypeHierarchy.Supertypes"/>
			<separator/>
			<reference ref="EditSource"/>
			<separator/>
			<reference ref="FindUsages"/>
			<reference ref="RefactoringMenu"/>
			<separator/>
			<reference ref="AddToFavorites"/>
			<separator/>
			<reference ref="RunContextPopupGroup"/>
			<separator/>
			<reference ref="ReformatCode"/>
			<reference ref="OptimizeImports"/>
			<reference ref="$Delete"/>
			<separator/>
			<reference ref="VersionControlsGroup"/>
			<separator/>
			<reference ref="ExternalToolsGroup"/>
			<separator/>
			<reference ref="CompareTwoFiles"/>
			<reference ref="CompareFileWithEditor"/>
		</group>

		<action id="com.jetbrains.python.console.RunPythonConsoleAction"
				class="com.jetbrains.python.console.RunPythonConsoleAction"
				text="Run Python Console..." description="Allows to quickly run Python console">
			<add-to-group group-id="ToolsMenu" anchor="last"/>
		</action>

		<action id="com.jetbrains.python.console.PyOpenDebugConsoleAction"
				class="com.jetbrains.python.console.PyOpenDebugConsoleAction"
				text="Open Debug Command Line" description="Opens debug command line for running process">
			<add-to-group group-id="ToolsMenu" anchor="last"/>
		</action>


		<action id="NewPythonFile" class="com.jetbrains.python.actions.CreatePythonFileAction" require-module-extensions="@@pythonExtensions">
			<add-to-group group-id="NewGroup1"/>
		</action>

		<action id="NewPythonPackage" class="com.jetbrains.python.actions.CreatePackageAction" text="Python Package"
				description="Create a new directory and __init__.py inside it" icon="AllIcons.Nodes.Package"
				require-module-extensions="@@pythonExtensions">
			<add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewDir"/>
		</action>

		<action id="CompuleQrc" class="com.jetbrains.pyqt.CompileQrcAction" text="Compile .qrc file">
			<add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="first"/>
		</action>

		<action id="CleanPyc" class="com.jetbrains.python.actions.CleanPycAction" text="Clean .pyc"
				description="Delete compiled bytecode files in selected directory and its subdirectories"
				require-module-extensions="@@pythonExtensions">
			<add-to-group group-id="ProjectViewPopupMenu" anchor="after" relative-to-action="ProjectViewPopupMenuRefactoringGroup"/>
		</action>

		<group id="PyPackagingMenu" text="Packaging">
			<action id="CreateSetupPy" class="com.jetbrains.python.packaging.setupPy.CreateSetupPyAction"/>
			<action id="RunSetupPyTask" class="com.jetbrains.python.packaging.setupPy.SetupTaskChooserAction"/>
			<add-to-group group-id="ToolsMenu" anchor="last"/>
		</group>

		<action id="PythonGenerateDictionaries" class="com.jetbrains.python.spellchecker.PythonSpellcheckerGenerateDictionariesAction"
				text="Generate Python Spellchecker Dictionaries" internal="true">
			<add-to-group group-id="Internal"/>
		</action>

		<action id="PyInvertBooleanAction" class="com.jetbrains.python.refactoring.invertBoolean.PyInvertBooleanAction" text="Invert Boolean">
			<add-to-group group-id="RefactoringMenu" anchor="last"/>
		</action>
	</actions>

	<extensions defaultExtensionNs="com.intellij.spellchecker">
		<bundledDictionaryProvider implementation="com.jetbrains.python.spellchecker.PythonBundledDictionaryProvider"/>
	</extensions>

	<application-components>
		<component>
			<implementation-class>com.jetbrains.python.testing.VFSTestFrameworkListener</implementation-class>
		</component>
	</application-components>

</consulo-plugin>