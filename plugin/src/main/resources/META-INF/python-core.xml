<consulo-plugin>
  <!-- Components and extensions declared in this file work both in PyCharm and Python plugin. -->


  <extensions defaultExtensionNs="com.intellij">


    <lang.documentationProvider language="Python"
                                implementationClass="com.jetbrains.python.impl.documentation.PythonDocumentationProvider"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.impl.console.PydevDocumentationProvider"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.impl.validation.PyAnnotatingVisitor"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.impl.validation.PyDumbAwareAnnotator"/>


    <typedHandler implementation="com.jetbrains.python.impl.codeInsight.KeywordTypedHandler" id="pyCommaAfterKwd"/>
    <typedHandler implementation="com.jetbrains.python.impl.codeInsight.PyMethodNameTypedHandler" id="pyMethodNameTypedHandler"/>
    <typedHandler implementation="com.jetbrains.python.impl.editor.PythonSpaceHandler"/>


    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyConvertMethodToPropertyIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.ImportToImportFromIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyConvertStaticMethodToFunctionIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.SpecifyTypeInDocstringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.SpecifyTypeInPy3AnnotationsIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.TypeAssertionIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.ImportFromToImportIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.ImportToggleAliasIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PySplitIfIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyNegateComparisonIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyStringConcatenationToFormatIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.ConvertFormatOperatorToMethodIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyFlipComparisonIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyDemorganIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.ReplaceListComprehensionWithForIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyJoinIfIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyDictConstructorToLiteralFormIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyDictLiteralFormToConstructorIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyQuotedStringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyConvertLambdaToFunctionIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.ConvertVariadicParamIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyConvertTripleQuotedStringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyTransformConditionalExpressionIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyGenerateDocstringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.impl.codeInsight.intentions.PyYieldFromIntention</className>
      <category>Python</category>
    </intentionAction>


    <stubElementTypeHolder class="com.jetbrains.python.impl.PyElementTypes"/>


    <lang.parserDefinition language="PythonVerboseRegExp"
                           implementationClass="com.jetbrains.python.impl.codeInsight.regexp.PythonVerboseRegexpParserDefinition"/>
    <lang.syntaxHighlighterFactory key="PythonVerboseRegExp"
                                   implementationClass="com.jetbrains.python.impl.codeInsight.regexp.PythonVerboseRegexpSyntaxHighlighterFactory"/>


    <applicationConfigurable id="editor.preferences.import.python"
                             parentId="editor.preferences.import"
                             displayName="Python"
                             instance="com.jetbrains.python.impl.codeInsight.imports.PyAutoImportConfigurable"/>

    <bundleLiveTemplateSet path="/liveTemplates/Python"/>



    <internalFileTemplate name="Python Script"/>
    <internalFileTemplate name="Python Unit Test"/>
    <internalFileTemplate name="Setup Script"/>


    <applicationConfigurable id="editor.preferences.smartKeys.python"
                             parentId="editor.preferences.smartKeys"
                             displayName="Python"
                             instance="com.jetbrains.python.impl.codeInsight.PySpecificSmartKeysOptions"/>


    <applicationConfigurable instance="com.jetbrains.python.impl.documentation.PythonDocumentationConfigurable"
                             parentId="execution"
                             id="py.external.doc"
                             displayName="Python External Documentation"/>

    <projectConfigurable instance="com.jetbrains.python.impl.configuration.PyIntegratedToolsModulesConfigurable"
                         parentId="execution"
                         id="com.jetbrains.python.impl.configuration.PyIntegratedToolsModulesConfigurable"
                         displayName="Python Integrated Tools"
                         nonDefaultProject="true"/>

    <projectConfigurable instance="com.jetbrains.python.impl.console.PyConsoleOptionsConfigurable"/>
    <projectService serviceImplementation="com.jetbrains.python.impl.console.PyConsoleOptions"/>

    <projectConfigurable id="py.debugger" parentId="execution" displayName="Python Debugger"
                         instance="com.jetbrains.python.impl.debugger.PyDebuggerConfigurable"/>



    <additionalTextAttributes scheme="Default" file="colorSchemes/PythonDefault.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorSchemes/PythonDarcula.xml"/>


    <editorActionHandler action="EditorCopy" implementationClass="com.jetbrains.python.impl.console.PyConsoleCopyHandler"/>
  </extensions>


  <actions>
    <group id="PyTypeHierarchyPopupMenu">
      <reference ref="TypeHierarchyBase.BaseOnThisType"/>
      <reference ref="TypeHierarchy.Class"/>
      <reference ref="TypeHierarchy.Subtypes"/>
      <reference ref="TypeHierarchy.Supertypes"/>
      <separator/>
      <reference ref="EditSource"/>
      <separator/>
      <reference ref="FindUsages"/>
      <reference ref="RefactoringMenu"/>
      <separator/>
      <reference ref="AddToFavorites"/>
      <separator/>
      <reference ref="RunContextPopupGroup"/>
      <separator/>
      <reference ref="ReformatCode"/>
      <reference ref="OptimizeImports"/>
      <reference ref="$Delete"/>
      <separator/>
      <reference ref="VersionControlsGroup"/>
      <separator/>
      <reference ref="ExternalToolsGroup"/>
      <separator/>
      <reference ref="CompareTwoFiles"/>
      <reference ref="CompareFileWithEditor"/>
    </group>

    <action id="com.jetbrains.python.impl.console.RunPythonConsoleAction"
            class="com.jetbrains.python.impl.console.RunPythonConsoleAction"
            text="Run Python Console..." description="Allows to quickly run Python console">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <action id="com.jetbrains.python.impl.console.PyOpenDebugConsoleAction"
            class="com.jetbrains.python.impl.console.PyOpenDebugConsoleAction"
            text="Open Debug Command Line" description="Opens debug command line for running process">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>


    <action id="NewPythonFile" class="com.jetbrains.python.impl.actions.CreatePythonFileAction">
      <add-to-group group-id="NewGroup1"/>
    </action>

    <action id="NewPythonPackage" class="com.jetbrains.python.impl.actions.CreatePackageAction" text="Python Package"
            description="Create a new directory and __init__.py inside it">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewDir"/>
    </action>

    <action id="CompuleQrc" class="com.jetbrains.pyqt.CompileQrcAction" text="Compile .qrc file">
      <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="first"/>
    </action>

    <action id="CleanPyc" class="com.jetbrains.python.impl.actions.CleanPycAction" text="Clean .pyc"
            description="Delete compiled bytecode files in selected directory and its subdirectories"
            require-module-extensions="@@pythonExtensions">
      <add-to-group group-id="ProjectViewPopupMenu" anchor="after" relative-to-action="ProjectViewPopupMenuRefactoringGroup"/>
    </action>

    <group id="PyPackagingMenu" text="Packaging">
      <action id="CreateSetupPy" class="com.jetbrains.python.impl.packaging.setupPy.CreateSetupPyAction"/>
      <action id="RunSetupPyTask" class="com.jetbrains.python.impl.packaging.setupPy.SetupTaskChooserAction"/>
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="PythonGenerateDictionaries" class="com.jetbrains.python.impl.spellchecker.PythonSpellcheckerGenerateDictionariesAction"
            text="Generate Python Spellchecker Dictionaries" internal="true">
      <add-to-group group-id="Internal"/>
    </action>

    <action id="PyInvertBooleanAction" class="com.jetbrains.python.impl.refactoring.invertBoolean.PyInvertBooleanAction"
            text="Invert Boolean">
      <add-to-group group-id="RefactoringMenu" anchor="last"/>
    </action>

    <action id="PyManagePackages" class="com.jetbrains.python.impl.packaging.PyManagePackagesAction" text="Manage Python Packages...">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>
  </actions>

</consulo-plugin>